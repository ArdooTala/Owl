Imports System.IO
Imports Owl.Core.Tensors
Imports Owl.Core.IO


''' <summary>
''' Various examples for the fellow developers.
''' </summary>
<HideModuleName>
Module Snippets

    ''' <summary>
    ''' Example showing how to use streams with tensors.
    ''' </summary>
    ''' <returns></returns>
    Private Function StreamingTest() As Boolean
        Dim ts As New TensorSet()
        ts.Add(New Tensor(10))
        ts(0)(2) = 3

        Dim tsread As TensorSet = Nothing

        Using ms As New MemoryStream
            WriteTensors(ms, ts)
            ms.Position = 0
            tsread = ReadTensors(ms)
        End Using

        Debug.WriteLine(tsread(0).ToString)

        Return True
    End Function

    ''' <summary>
    ''' Example showing the really basic way to create Tensors and add them to a TensorSet.
    ''' </summary>
    ''' <returns></returns>
    Private Function CreateTensors() As TensorSet
        Dim result As New TensorSet()
        Dim rnd As New Random(123)

        'We will create a 2D Tensor, those will be the dimensions. It will be square array.
        Dim tensorWidth As Integer = 10
        Dim tensorLength As Integer = tensorWidth ^ 2

        'The number of Tensors to create.
        Dim tensorCount As Integer = 100

        For i = 0 To tensorCount - 1
            'Tensor is essentially a multidimensional Array... 
            'but you can change the number and size of array dimensions dynamically
            'This will create a simple 1D Tensor, we can Reshape it later.
            Dim thisTens As New Tensor(tensorCount)

            'Thanks to the ability to Reshape whenever we want, we can greatly simplify the way we create a random Tensor.
            For j = 0 To thisTens.Length - 1
                thisTens(j) = rnd.NextDouble
            Next

            'Now we can try to reshape the Tensor. If it's not possible (tensorWidth ^ 2 <> TensorLength) then we throw an error.
            If Not thisTens.TryReshape({tensorWidth, tensorWidth}) Then Throw New Exception("Wrong Tensor Shape") : Exit Function

            'The TensorSet is essentially a List of Tensors. 
            'While the Tensor is fixed with length (just like an Array)
            'It's way easier to work with dynamic collections in the end.
            result.Add(thisTens)
        Next

        'Let's normalize the TensorSet before returning. 
        result.Remap(New Structures.Range(0, 1))

        Return result
    End Function



End Module
